"
" vim plugins, managed by Vundle
"
" Author: zcodes <zcodes@163.com>
"
" a collection of language packs for vim, see: https://github.com/sheerun/vim-polyglot
" =====================================================

Plugin 'VundleVim/Vundle.vim'

" bufexplorer
" Plugin 'c9s/bufexplorer'
Plugin 'jlanzarotta/bufexplorer'
" minibufexpl
" Plugin 'weynhamz/vim-plugin-minibufexpl'

" nerdtree {{{
Plugin 'scrooloose/nerdtree'
let g:NERDTreeDirArrowExpandable="+"
let g:NERDTreeDirArrowCollapsible="~"
let g:NERDTreeMinimalUI=1
let NERDTreeDirArrows=0
nmap <F3> :NERDTreeFocus<cr>
nmap <F4> :NERDTreeClose<cr>
" }}}

" snipmate and snippets {{{
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

let g:snipMate = {}
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['ruby'] = 'ruby,ruby-rails,ruby-1.9'
let g:snipMate.scope_aliases['vimwiki'] = 'vimwiki'
let g:snipMate.scope_aliases['php'] = 'php'
" }}}

" snippets with ultisnips {{{
" Plugin 'sirver/ultisnips'
" Plugin 'honza/vim-snippets'

" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<c-b>"
" let g:UltiSnipsJumpBackwardTrigger = "<c-z>"

" let g:UltiSnipsEditSplit = "vertical"
" let g:UltiSnipsUsePythonVersion = 3
" }}}

" {{{emmet
" C-y , expand expression
Plugin 'mattn/emmet-vim'

" https://github.com/mattn/emmet-vim/issues/168
let g:user_emmet_install_global = 0
let g:user_emmet_complete_tag = 1
autocmd FileType html,css,blade,twig,jsp EmmetInstall

" https://github.com/mattn/emmet-vim/issues/168
" TODO snipmate position not work !
function! s:emmet_with_snipmate()
    if snipMate#CanBeTriggered()
        return "\<plug>snipMateNextOrTrigger"
    endif

    let line = getline('.')
    if col('.') < len(line)
        let line = matchstr(line, '[">][^<"]*\%'.col('.').'c[^>"]*[<"]')

        if len(line) >= 2
            return "\<Plug>(emmet-move-next)"
        endif
    endif

    if pumvisible()
        return "\<c-n>"
    endif

    if emmet#isExpandable()
        return "\<plug>(emmet-expand-abbr)"
    endif

    return "\<tab>"
endfunction
auto FileType html,css,blade,twig,jsp imap <buffer><expr><tab> <sid>emmet_with_snipmate()
" }}}

" file searching {{{
Plugin 'mileszs/ack.vim'
" use the_silver_searcher [ag]
let g:ackprg='ag --vimgrep'
" }}}

" comment {{{
Plugin 'tpope/vim-commentary'

" Alternative plugins for comment
" Plugin 'tomtom/tcomment_vim'
Plugin 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1
" }}}

" ctrlp {{{
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'FelikZ/ctrlp-py-matcher'
Plugin 'tacahiroy/ctrlp-funky'
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_use_caching = 1
let g:ctrlp_working_path_mode = 'raw'
let g:ctrlp_root_markers = ['.git', '.svn']
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
" let g:ctrlp_user_command = 'ag -l -g "" --nocolor %s'
" let g:ctrlp_user_command = 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'
" let g:ctrlp_max_files = 200000
" let g:ctrlp_max_files = 10
" let g:ctrlp_open_single_match = ['buffer tags', 'buffer']
let s:ctrlp_common_user_command = {
            \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
            \ },
            \ }
if zcodes#has#windows()
    " TODO some awesome thing here !!!
    " let g:ctrlp_user_command = extend(
    "             \ s:ctrlp_common_user_command, {
    "             \ 'fallback': 'dir %s /-n /b /s /a-d | findstr /v /l ".jpg .png .exe .pyc"'
    "             \ }
    "             \ )
else
    let g:ctrlp_user_command = extend(
                \ s:ctrlp_common_user_command,  {
                \ 'fallback': 'find %s \( -regex ".*/.\(svn\|git\)" -prune -o -regex ".*.\(exe$\|so$\|dll$\)" -prune \) -o -type f -print'
                \ }
                \ )
endif
augroup CtrlPLeaderKeyMapping
    au!

    nnoremap <c-b> :CtrlPBuffer<cr>
    nnoremap <leader>bb :CtrlPBuffer<cr>
augroup END
" }}}

" git plugin
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

" supertab {{{
Plugin 'ervandew/supertab'
" SuperTab Settings
" g:SuperTabDefaultCompletionType
" g:SuperTabContextDefaultCompletionType
" b:SuperTabContextDefaultCompletionType
let g:SuperTabDefaultCompletionType = 'context'

autocmd FileType html,css,blade,twig,jsp
            \ if &omnifunc != '' |
            \   call SuperTabChain(&omnifunc, "<c-p>") |
            \ endif
" }}}

" list tags {{{
Plugin 'majutsushi/tagbar'
let g:tagbar_show_linenumbers = 0
let g:tagbar_foldlevel = 2
nnoremap <F5> :TagbarOpenAutoClose<cr>
nnoremap <leader>tt :TagbarOpenAutoClose<cr>
nnoremap <leader>to :TagbarOpen<cr>
nnoremap <leader>tc :TagbarClose<cr>
" }}}

" airline {{{
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
if has('gui_running')
    let g:airline_theme = 'tomorrow'
else
    let g:airline_theme = 'raven'
endif
let g:airline_powerline_fonts=0
" }}}

" color themes {{{
" for more color themes, see: http://vimcolors.com
Plugin 'zcodes/vim-colors-basic'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'altercation/vim-colors-solarized'
Plugin 'dracula/vim'
Plugin 'tomasr/molokai'
let g:molokai_original = 0
let g:rehash256 = 1
" }}}

" html5
Plugin 'othree/html5.vim'

" file type support {{{
" javascript
Plugin 'pangloss/vim-javascript'
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1
" json
Plugin 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0


" markdown
" text align
" vim-markdown need's tabular
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
" another markdown plugin
" Plugin 'gabrielelana/vim-markdown'
" let g:vim_markdown_folding_style_pythonic = 1
" let g:vim_markdown_override_foldtext = 1
let g:vim_markdown_folding_level = 6
" let g:vim_markdonw_toc_autofit = 1
" let g:vim_markdown_conceal = 0
let g:vim_markdown_frontmatter = 1

" mustache
Plugin 'mustache/vim-mustache-handlebars'

" ruby
Plugin 'vim-ruby/vim-ruby'

" php {{{
" Plugin 'StanAngeloff/php.vim'
Plugin 'zcodes/php.vim'
" let g:php_syntax_extensions_enabled = []
" let g:php_syntax_extensions_disabled = []

" php twig
Plugin 'evidens/vim-twig'

" php complete
Plugin 'shawncplus/phpcomplete.vim'

" php unit
Plugin 'wdalmut/vim-phpunit'

" php namespace
Plugin 'arnaud-lb/vim-php-namespace'

" laravel blade
Plugin 'zcodes/vim-blade'
" Plugin 'jwalton512/vim-blade'
" }}}

" puppet
Plugin 'rodjek/vim-puppet'
" css
" Plugin 'JulesWang/css.vim'
Plugin 'hail2u/vim-css3-syntax'
" less
Plugin 'genoma/vim-less'

" python {{{
"
" Use python3 default here, and python2 for fallback.
if has('pythonx')
    if has('python3')
        set pyx=3
    elseif has('python')
        set pyx=2
    endif
endif
Plugin 'python-mode/python-mode'
let g:pymode = 1
let g:pymode_options = 1
let g:pymode_options_max_line_length = 79
let g:pymode_options_colorcolumn = 1
let g:pymode_indent = 1
let g:pymode_folding = 1
let g:pymode_rope = 0
let g:pymode_motion = 0
let g:pymode_doc = 0
" 默认使用 python3
let g:pymode_python = 'python3'
let g:pymode_trim_whitespaces = 1
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_autoimport = 0
" ignore too long lines.
let g:pymode_lint_ignore = "E501"
let g:pymode_run = 1
let g:pymode_breakpoint = 0
let g:pymode_run_bind = '<leader>rr'

Plugin 'davidhalter/jedi-vim'
let g:jedi#force_py_version = 3
let g:jedi#rename_command = '<leader>rn'
" }}}

" jade
Plugin 'digitaltoad/vim-jade'

" coffeescript
" Plugin 'kchmck/vim-coffee-script'
Plugin 'zcodes/vim-coffee-script'


" go {{{
Plugin 'fatih/vim-go'
" use :GoInstallBinaries install additional tools
" and set it's installtion path
" let g:go_bin_path = expand("~/.gotools")
" syntax-highlighting options
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" By default vim-go shows errors for the fmt command, to disable it:
" let g:go_fmt_fail_silently = 1
" Disable auto fmt on save:
" let g:go_fmt_autosave = 0
" Disable opening browser after posting your snippet to play.golang.org:
let g:go_play_open_browser = 0
" Disable updating dependencies when installing/updating binaries:
let g:go_get_update = 0

" keybinds for vim-go
au FileType go nmap <leader>gr <Plug>(go-run)
au FileType go nmap <leader>gb <Plug>(go-build)
au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <leader>gc <Plug>(go-coverage)

" other keys, just comment here.
" au FileType go nmap <Leader>ds <Plug>(go-def-split)
" au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
" au FileType go nmap <Leader>dt <Plug>(go-def-tab)
" au FileType go nmap <Leader>gd <Plug>(go-doc)
" au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
" au FileType go nmap <Leader>s <Plug>(go-implements)
" au FileType go nmap <Leader>i <Plug>(go-info)
" au FileType go nmap <Leader>e <Plug>(go-rename)
" }}}

" Plugin 'AndrewRadev/vim-eco'
Plugin 'zcodes/vim-eco'
" }}}

" plugin for typescript
Plugin 'leafgarland/typescript-vim'

" preview colors {{{
Plugin 'gorodinskiy/vim-coloresque'
Plugin 'lilydjwg/colorizer'
" no enable by default
" let g:colorizer_startup = 0
" no mapping
let g:colorizer_nomap = 1
nnoremap <leader>ct <plug>Colorizer
" }}}

" {{{auto-pairs
Plugin 'jiangmiao/auto-pairs'
" <BS> will conflict with SCIM with 'Embered Preedit String into client
" window' option enabled
" let g:AutoPairsMapBS = 0
" }}}

" vim-choosewin {{{
Plugin 't9md/vim-choosewin'
nmap - <Plug>(choosewin)
let g:choosewin_overlay_enable = 0
" }}}

" pangu {{{
Plugin 'zcodes/pangu.vim'
if has('autocmd')
    augroup enablePanGu
        au!
        autocmd BufWritePre *.markdown,*.md,*.txt,*.wiki,*.rst call PanGuSpacing()
    augroup END
endif
" }}}


" vimwiki {{{
Plugin 'vimwiki/vimwiki'
" let wiki_vim = {}
" if has('win32')
"     let wiki_vim.base_path = '~/vimfiles/'
" else
"     let wiki_vim.base_path = '~/.vim/'
" endif
" let wiki_vim.path = wiki_vim.base_path . 'wiki/'
" let wiki_vim.path_html = wiki_vim.base_path . 'wiki_html/'
" let wiki_vim.template_path = wiki_vim.base_path . 'wiki_templates/'
" let wiki_vim.template_default = 'default'
" let wiki_vim.template_ext = '.html'
" let wiki_vim.auto_export = 1

" let wiki_user = {}
" let wiki_user.path = '~/vimwiki'
" let wiki_user.path_html = '~/vimwiki_html'
" let g:vimwiki_list = [wiki_vim, wiki_user]
" disable table mappings, it is confilict with vim-snipmate
let g:vimwiki_table_mappings = 0
" autocmd FileType vimwiki inoremap <expr> <buffer> <C-Tab> vimwiki#tbl#kbd_tab()
" autocmd FileType vimwiki inoremap <expr> <buffer> <S-Tab> vimwiki#tbl#kbd_shift_tab()
" }}}

" Vim Powershell Plugin
Plugin 'PProvost/vim-ps1'
Plugin 'mhinz/vim-startify'
" add file type icons
" Plugin 'ryanoasis/vim-devicons'

" vim session {{{
Plugin 'tpope/vim-obsession'
Plugin 'dhruvasagar/vim-prosession'
let g:prosession_on_startup = 0
if zcodes#has#windows()
    let g:prosession_dir = '~/vimfiles/session/'
endif
" }}}

" taboo.vim -- Few utilities for pretty tabs {{{
" Plugin 'gcmt/taboo.vim'
Plugin 'zcodes/taboo.vim'
let g:taboo_tab_format=" %N %p%m "
" }}}

" Tab management
Plugin 'kien/tabman.vim'

Plugin 'tpope/vim-surround'
" Plugin 'elentok/plaintasks.vim'
Plugin 'easymotion/vim-easymotion'

" indent guides
" Plugin 'Yggdroot/indentLine'
" let g:indentLine_char = '┊'
" Plugin 'nathanaelkane/vim-indent-guides'

" editor config
Plugin 'editorconfig/editorconfig-vim'

" lorem fake generator
Plugin 'tkhren/vim-fake'

" windows dosbatch file indent
" Plugin 'k-takata/vim-dosbatch-indent'
Plugin 'zcodes/vim-dosbatch-indent'

" vim: ts=4 sts=4 sw=4 et fdm=marker
