" File: vimrc.plugins
" Author: zcodes <zcodes@qq.com>
" Description: vim plugins, managed by vundle.
" Note: a collection of language packs for vim, see:
"   https://github.com/sheerun/vim-polyglot
"
scriptencoding utf-8

Plugin 'VundleVim/Vundle.vim'

" bufexplorer {{{
Plugin 'jlanzarotta/bufexplorer'
" }}}

" nerdtree {{{
Plugin 'scrooloose/nerdtree'
let g:NERDTreeDirArrowExpandable='+'
let g:NERDTreeDirArrowCollapsible='~'
let g:NERDTreeMinimalUI=1
let g:NERDTreeDirArrows=0
nmap <F3> :NERDTreeFocus<cr>
nmap <F4> :NERDTreeClose<cr>
nnoremap <leader>bn :NERDTreeFocus<cr>
nnoremap <leader>bc :NERDTreeClose<cr>
" }}}
" snipmate and snippets {{{
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'

let g:snipMate = {}
let g:snipMate.scope_aliases = {}
let g:snipMate.scope_aliases['ruby'] = 'ruby,ruby-rails,ruby-1.9'
let g:snipMate.scope_aliases['vimwiki'] = 'vimwiki'
let g:snipMate.scope_aliases['php'] = 'php'
" }}}
" snippets with ultisnips {{{
" Plugin 'sirver/ultisnips'
" Plugin 'honza/vim-snippets'

" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<c-b>"
" let g:UltiSnipsJumpBackwardTrigger = "<c-z>"

" let g:UltiSnipsEditSplit = "vertical"
" let g:UltiSnipsUsePythonVersion = 3
" }}}
" {{{emmet
" C-y , expand expression
Plugin 'mattn/emmet-vim'

" https://github.com/mattn/emmet-vim/issues/168
let g:user_emmet_install_global = 0
let g:user_emmet_complete_tag = 1
augroup MyEnableEmmet
    au!
    autocmd FileType html,css,blade,twig,jsp,htmldjango,xml,svg EmmetInstall
augroup END

" https://github.com/mattn/emmet-vim/issues/168
" TODO snipmate position not work !
function! s:emmet_with_snipmate()
    if snipMate#CanBeTriggered()
        return "\<plug>snipMateNextOrTrigger"
    endif

    let l:line = getline('.')
    if col('.') < len(l:line)
        let l:line = matchstr(l:line, '[">][^<"]*\%'.col('.').'c[^>"]*[<"]')

        if len(l:line) >= 2
            return "\<Plug>(emmet-move-next)"
        endif
    endif

    if pumvisible()
        return "\<c-n>"
    endif

    if emmet#isExpandable()
        return "\<plug>(emmet-expand-abbr)"
    endif

    return "\<tab>"
endfunction
auto FileType html,css,blade,twig,jsp imap <buffer><expr><tab> <sid>emmet_with_snipmate()
" }}}
" file searching {{{
Plugin 'mileszs/ack.vim'
" use the_silver_searcher [ag]
let g:ackprg='ag --vimgrep'
" }}}
" comment {{{
Plugin 'tpope/vim-commentary'
augroup MyCommentary
    autocmd FileType cpp setlocal commentstring=//\ %s
augroup end

" Alternative plugins for comment
" Plugin 'tomtom/tcomment_vim'
Plugin 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1
" }}}
" ctrlp {{{
" Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'zcodes/ctrlp.vim'
Plugin 'FelikZ/ctrlp-py-matcher'
Plugin 'tacahiroy/ctrlp-funky'
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_funky_use_cache = 1
" 退出vim时不清空缓存
let g:ctrlp_clear_cache_on_exit = 0
" 扫描隐藏目录和文件
let g:ctrlp_show_hidden = 1
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_use_caching = 1
let g:ctrlp_working_path_mode = 'raw'
let g:ctrlp_root_markers = ['.git', '.svn']
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
if z#is_win()
    let g:ctrlp_system_filename_encoding = 'gbk'
endif
" if z#is_win()
"     set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\*
" else
"     set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
" endif
" let g:ctrlp_user_command = 'ag -l -g "" --nocolor %s'
" let g:ctrlp_user_command = 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'
" let g:ctrlp_max_files = 200000
" let g:ctrlp_max_files = 10
" let g:ctrlp_open_single_match = ['buffer tags', 'buffer']
let s:ctrlp_common_user_command = {
            \ 'types': {
            \ 1: ['.git', 'cd %s && git -c core.quotepath=false ls-files -co --exclude-standard'],
            \ },
            \ }
if z#is_win()
    " let g:ctrlp_custom_ignore = {
    "             \ 'dir': '\v[\/]\.(git|hg|svn)$',
    "             \ 'file': '\v\.(exe|so|dll)$',
    "             \}
    let g:ctrlp_user_command = extend(
                \ s:ctrlp_common_user_command, {
                \ 'fallback': 'dir %s /-n /b /s /a-d | findstr /v /l ".jpg .png .exe .pyc .git\\ .svn\\ .gif"'
                \ }
                \ )
else
    let g:ctrlp_user_command = extend(
                \ s:ctrlp_common_user_command,  {
                \ 'fallback': 'find %s \( -regex ".*/.\(svn\|git\)" -prune -o -regex ".*.\(exe$\|so$\|dll$\|png$\|jpg$\)" -prune \) -o -type f -print'
                \ }
                \ )
endif
augroup CtrlPLeaderKeyMapping
    au!

    nnoremap <leader>pp :CtrlP<cr>
    nnoremap <leader>pb :CtrlPBuffer<cr>
    nnoremap <c-f11> :CtrlPBuffer<cr>
    nnoremap <leader>pf :CtrlPFunky<cr>
    nnoremap <c-f12> :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    nnoremap <c-s-f12> :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
augroup END
" }}}
" git plugin {{{
" Plugin 'airblade/vim-gitgutter'
Plugin 'zcodes/vim-gitgutter'
let g:gitgutter_max_signs = 1000
let g:gitgutter_log = 1
let g:gitgutter_async = 1
let g:gitgutter_sign_removed = '-'
if executable('ag')
    let g:gitgutter_grep = 'ag --nocolor -S'
endif

Plugin 'mhinz/vim-signify'
let g:signify_vcs_list = ['svn']
let g:signify_realtime = 1
" let g:signify_disable_by_default = 1
Plugin 'tpope/vim-fugitive'
" }}}
" supertab {{{
Plugin 'ervandew/supertab'
" SuperTab Settings
" g:SuperTabDefaultCompletionType
" g:SuperTabContextDefaultCompletionType
" b:SuperTabContextDefaultCompletionType
let g:SuperTabDefaultCompletionType = 'context'

augroup MyEnableSupertab
    au!
    autocmd FileType html,css,blade,twig,jsp
                \ if &omnifunc != '' |
                \   call SuperTabChain(&omnifunc, "<c-p>") |
                \ endif
augroup END
" }}}
" list tags {{{
Plugin 'majutsushi/tagbar'
let g:tagbar_show_linenumbers = 0
let g:tagbar_foldlevel = 2
nnoremap <F5> :TagbarOpenAutoClose<cr>
nnoremap <leader>tt :TagbarOpenAutoClose<cr>
nnoremap <leader>to :TagbarOpen<cr>
nnoremap <leader>tc :TagbarClose<cr>
" }}}
" airline {{{
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
let g:airline_theme = 'tomorrow'
let g:airline_powerline_fonts = 0
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = ''
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = 'Ɇ'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline#extensions#whitespace#trailing_format = 'trailing[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mi[%s]'
let g:airline#extensions#whitespace#long_format = 'long[%s]'
let g:airline#extensions#whitespace#mixed_indent_file_format = 'mif[%s]'
" }}}
" file type support {{{

" html5
Plugin 'othree/html5.vim'
let g:html_indent_style1 = 'inc'
let g:html_indent_script1 = 'inc'

" javascript
Plugin 'pangloss/vim-javascript'
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1
let g:javascript_plugin_flow = 1

" json
Plugin 'elzr/vim-json'
let g:vim_json_syntax_conceal = 0

" markdown
" text align
" vim-markdown need's tabular
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
" another markdown plugin
" Plugin 'gabrielelana/vim-markdown'
" let g:vim_markdown_folding_style_pythonic = 1
" let g:vim_markdown_override_foldtext = 1
let g:vim_markdown_folding_level = 6
" let g:vim_markdonw_toc_autofit = 1
" let g:vim_markdown_conceal = 0
let g:vim_markdown_frontmatter = 1

" mustache
Plugin 'mustache/vim-mustache-handlebars'

" ruby
Plugin 'vim-ruby/vim-ruby'

" php {{{
" Plugin 'StanAngeloff/php.vim'
Plugin 'zcodes/php.vim'
" let g:php_syntax_extensions_enabled = []
" let g:php_syntax_extensions_disabled = []

" Plugin '2072/PHP-Indenting-for-VIm'
Plugin 'zcodes/PHP-Indenting-for-Vim'
" let g:PHP_vintage_case_default_indent = 1
let g:PHP_noArrowMatching = 1

" php twig
Plugin 'evidens/vim-twig'

" php complete
Plugin 'shawncplus/phpcomplete.vim'
let g:phpcomplete_enhance_jump_to_definition = 0

" php unit
Plugin 'wdalmut/vim-phpunit'

" php namespace
Plugin 'arnaud-lb/vim-php-namespace'

" laravel blade
Plugin 'zcodes/vim-blade'
" Plugin 'jwalton512/vim-blade'
" }}}

" c++
Plugin 'octol/vim-cpp-enhanced-highlight'
" Plugin 'Shougo/vimproc.vim'
" Plugin 'rhysd/vim-clang-format'
Plugin 'Chiel92/vim-autoformat'

" puppet
Plugin 'rodjek/vim-puppet'

" css
" Plugin 'JulesWang/css.vim'
Plugin 'hail2u/vim-css3-syntax'
" less
Plugin 'genoma/vim-less'

" python {{{
"
" Use python3 default here, and python2 for fallback.
if has('pythonx')
    if has('python3')
        set pyxversion=3
    elseif has('python')
        set pyxversion=2
    endif
endif
" Plugin 'python-mode/python-mode'
Plugin 'zcodes/python-mode'
" enable pymode
let g:pymode = 1
let g:pymode_trim_whitespaces = 1
let g:pymode_options = 1
let g:pymode_options_max_line_length = 79
let g:pymode_options_colorcolumn = 0
let g:pymode_quickfix_minheight = 3
let g:pymode_quickfix_maxheight = 6

let g:pymode_indent = 1
let g:pymode_folding = 1
let g:pymode_motion = 1
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'
if system('uname') =~# 'Linux'
    let g:pymode_virtualenv = 1
else
    let g:pymode_virtualenv = 0
endif

let g:pymode_run = 1
let g:pymode_run_bind = '<leader>rr'

" breakpoint
let g:pymode_breakpoint = 0
" let g:pymode_breakpoint_bind = '<leader>b'
" let g:pymode_breakpoint_cmd = ''

" code check
" ============================================================
" ignore too long lines.
let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_unmodified = 0
let g:pymode_lint_on_fly = 0
let g:pymdoe_lint_message = 1
" valide value: 'pylint', 'pep8', 'mccabe', 'pep257', 'pyflake'
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
let g:pymode_lint_ignore = ['E501']
" let g:pymode_lint_select = []
" let g:pymode_lint_sort = []
let g:pymode_lint_cwindow = 0
let g:pymode_lint_signs = 1

" pylint signs defination
let g:pymode_lint_todo_symbol = 'WW'
let g:pymode_lint_comment_symbol = 'CC'
let g:pymode_lint_visual_symbol = 'RR'
let g:pymode_lint_error_symbol = 'EE'
let g:pymode_lint_info_symbol = 'II'
let g:pymode_lint_pyflakes_symbol = 'FF'

" code checker options
" let g:pymode_lint_options_pep8 = {}
" let g:pymode_lint_options_pyflakes = {}
" let g:pymode_lint_options_mccabe = {}
" let g:pymode_lint_options_pep257 = {}
" let g:pymode_lint_options_pylint = {}

" Rope
" ============================================================
let g:pymode_rope = 1
let g:pymode_rope_lookup_project = 1
" let g:pymode_rope_project_root = ""
" let g:pymode_rope_ropefolder = ".ropeproject"
let g:pymode_rope_show_doc_bind = '<leader>pd'
let g:pymode_rope_regenerate_on_write = 0
let g:pymode_rope_completion = 1
let g:pymode_rope_complete_on_dot = 1
let g:pymode_rope_completion_bind = '<C-j>'
let g:pymode_rope_autoimport = 1
" let g:pymode_rope_autoimport_modules = []
" let g:pymode_rope_autoimport_import_after_complete = 0
let g:pymode_rope_goto_definition_bind = '<C-]>'
let g:pymode_rope_goto_definition_cmd = 'new'
" let g:pymode_rope_rename_bind = '<C-c>rr'
" let g:pymode_rope_rename_module_bind = '<C-c>r1r'
" let g:pymode_rope_organize_imports_bind = '<C-c>ro'
" let g:pymode_rope_autoimport_bind = '<C-c>ra'
" let g:pymode_rope_module_to_package_bind = '<C-c>r1p'
" let g:pymode_rope_extract_method_bind = '<C-c>rm'
" let g:pymode_rope_extract_variable_bind = '<C-c>rl'
" let g:pymode_rope_use_function_bind = '<C-c>ru'
" let g:pymode_rope_move_bind = '<C-c>rv'
" let g:pymode_rope_change_signature_bind = '<C-c>rs'
"
" close doc window
" see: https://github.com/python-mode/python-mode/issues/384
augroup MyDisablePythonDocWindow
    au!
    autocmd CursorMovedI *.py if pumvisible() == 0|pclose|endif
    autocmd InsertLeave *.py if pumvisible() == 0|pclose|endif
augroup END

" 默认使用 python3
let g:pymode_python = 'python3'

" Syntax
let g:pymode_syntax = 1
let g:pymode_syntax_slow_sync = 0
let g:pymode_syntax_all = 1
let g:pymode_syntax_highlight_self = g:pymode_syntax_all

" Plugin 'davidhalter/jedi-vim'
" let g:jedi#force_py_version = 3
" let g:jedi#rename_command = '<leader>rn'
" let g:jedi#popup_on_dot = 0
"
" }}}

" django
Plugin 'tweekmonster/django-plus.vim'

" jade
Plugin 'digitaltoad/vim-jade'

" coffeescript
" Plugin 'kchmck/vim-coffee-script'
Plugin 'zcodes/vim-coffee-script'

" go {{{
if (v:version >= 800 || (v:version >= 704 && has('patch1689')))
    Plugin 'fatih/vim-go'
    " use :GoInstallBinaries install additional tools
    " and set it's installtion path
    " let g:go_bin_path = expand("~/.gotools")
    " syntax-highlighting options
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    " By default vim-go shows errors for the fmt command, to disable it:
    " let g:go_fmt_fail_silently = 1
    " Disable auto fmt on save:
    " let g:go_fmt_autosave = 0
    " Disable opening browser after posting your snippet to play.golang.org:
    let g:go_play_open_browser = 0
    " Disable updating dependencies when installing/updating binaries:
    let g:go_get_update = 0

    " keybinds for vim-go
    augroup MyGoKeyMap
        au!
        au FileType go nmap <leader>gr <Plug>(go-run)
        au FileType go nmap <leader>gb <Plug>(go-build)
        au FileType go nmap <leader>gt <Plug>(go-test)
        au FileType go nmap <leader>gc <Plug>(go-coverage)
    augroup END

    " other keys, just comment here.
    " au FileType go nmap <Leader>ds <Plug>(go-def-split)
    " au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
    " au FileType go nmap <Leader>dt <Plug>(go-def-tab)
    " au FileType go nmap <Leader>gd <Plug>(go-doc)
    " au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
    " au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
    " au FileType go nmap <Leader>s <Plug>(go-implements)
    " au FileType go nmap <Leader>i <Plug>(go-info)
    " au FileType go nmap <Leader>e <Plug>(go-rename)
endif
" }}}

" Plugin 'AndrewRadev/vim-eco'
Plugin 'zcodes/vim-eco'

" plugin for typescript
Plugin 'leafgarland/typescript-vim'

" Vim Powershell Plugin
Plugin 'PProvost/vim-ps1'

" windows dosbatch file indent
" Plugin 'k-takata/vim-dosbatch-indent'
Plugin 'zcodes/vim-dosbatch-indent'

" Lisp
Plugin 'kovisoft/slimv'

" Haskell
if exists('g:zcodes_enable_haskell')
    Plugin 'neovimhaskell/haskell-vim'
    " should install stylish-haskell
    " https://github.com/jaspervdj/stylish-haskell
    " Plugin 'nbouscal/vim-stylish-haskell'

    " install hindent first
    " https://github.com/commercialhaskell/hindent
    " Plugin 'alx741/vim-hindent'
endif

" rust
Plugin 'rust-lang/rust.vim'
Plugin 'cespare/vim-toml'

" nginx
Plugin 'chr4/nginx.vim'

" Racket
if exists('g:zcodes_enable_racket')
    Plugin 'wlangstroth/vim-racket'
endif

" AutoHotKey
Plugin 'hnamikaw/vim-autohotkey'

" }}}
" preview colors {{{
" Plugin 'gorodinskiy/vim-coloresque'
" Plugin 'lilydjwg/colorizer'
" no enable by default
" let g:colorizer_startup = 0
" no mapping
" let g:colorizer_nomap = 1
" nnoremap <leader>ct <plug>Colorizer
" }}}
" auto-pairs {{{
Plugin 'jiangmiao/auto-pairs'
" <BS> will conflict with SCIM with 'Embered Preedit String into client
" window' option enabled
" let g:AutoPairsMapBS = 0
let g:AutoPairsFlyMode = 0
" }}}
" vim-choosewin {{{
Plugin 't9md/vim-choosewin'
nmap <leader>w <Plug>(choosewin)
let g:choosewin_overlay_enable = 0
let g:choosewin_blink_on_land = 0
let g:choosewin_return_on_single_win = 0
" }}}
" pangu {{{
Plugin 'zcodes/pangu.vim'
if has('autocmd')
    augroup enablePanGu
        au!
        autocmd BufWritePre *.markdown,*.md,*.txt,*.wiki,*.rst call PanGuSpacing()
    augroup END
endif
" }}}
" vimwiki {{{
" Plugin 'vimwiki/vimwiki'
" let g:vimwiki_folding = 'expr'
" let g:vimwiki_table_mappings = 0
" let g:vimwiki_conceallevel = 0
" disable table mappings, it is confilict with vim-snipmate
" autocmd FileType vimwiki inoremap <expr> <buffer> <C-Tab> vimwiki#tbl#kbd_tab()
" autocmd FileType vimwiki inoremap <expr> <buffer> <S-Tab> vimwiki#tbl#kbd_shift_tab()
" }}}
" Tools {{{1
" startify {{{
Plugin 'mhinz/vim-startify'
" add file type icons
" Plugin 'ryanoasis/vim-devicons'
" }}}
" vim session {{{
Plugin 'tpope/vim-obsession'
Plugin 'dhruvasagar/vim-prosession'
let g:prosession_on_startup = 0
if z#is_win()
    let g:prosession_dir = '~/vimfiles/session/'
endif
" }}}
" taboo.vim -- Few utilities for pretty tabs {{{
" Plugin 'gcmt/taboo.vim'
Plugin 'zcodes/taboo.vim'
let g:taboo_tab_format=' %N %p%m '
" }}}
" tabman {{{
" Tab management
Plugin 'kien/tabman.vim'
" }}}
" surround {{{
" Plugin 'tpope/vim-surround'
Plugin 'zcodes/vim-surround'
" }}}

" Plugin 'elentok/plaintasks.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'tpope/vim-repeat'

" indent guides
" Plugin 'Yggdroot/indentLine'
" let g:indentLine_char = '┊'
" Plugin 'nathanaelkane/vim-indent-guides'

" editor config
Plugin 'editorconfig/editorconfig-vim'
" 'trim_trailing_whitespace' set to true cause problem when 'updatetime' set
" to a small value
let g:EditorConfig_disable_rules = ['trim_trailing_whitespace']

" lorem fake generator
Plugin 'tkhren/vim-fake'

Plugin 'zcodes/drawit'
Plugin 'terryma/vim-multiple-cursors'

" linter {{{
" 1. https://github.com/w0rp/ale
" 2. https://github.com/vim-syntastic/syntastic
Plugin 'w0rp/ale'
let g:ale_sign_column_always = 1
"
" standard: npm i -g standard
let g:ale_linters_explicit = 1
let g:ale_linters = {
            \ 'php': ['php'],
            \ 'vim': ['vint'],
            \ 'javascript': ['eslint --no-ignore', 'standard'],
            \ 'cpp': ['gcc'],
            \ }

let g:ale_fixers = {
            \ 'javascript': ['eslint'],
            \ }

" see: https://github.com/w0rp/ale/issues/891
autocmd BufEnter ControlP let b:ale_enabled = 0
" Plugin 'valloric/youcompleteme'
" }}}
"
" 1}}}

" vim: ts=4 sts=4 sw=4 et fdm=marker fdl=0
